{"/home/travis/build/npmtest/node-npmtest-electron-connect/test.js":"/* istanbul instrument in package npmtest_electron_connect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-connect/lib.npmtest_electron_connect.js":"/* istanbul instrument in package npmtest_electron_connect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_electron_connect = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_electron_connect = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-connect/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-electron-connect && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_electron_connect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_electron_connect\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_electron_connect.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_electron_connect.rollup.js'] =\n            local.assetsDict['/assets.npmtest_electron_connect.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_electron_connect.__dirname + '/lib.npmtest_electron_connect.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-connect/node_modules/electron-connect/index.js":"'use strict';\n\nvar server = require('./lib/server.js');\nvar client = require('./lib/client.js');\n\nmodule.exports = {\n  server: server,\n  client: client\n};\n","/home/travis/build/npmtest/node-npmtest-electron-connect/node_modules/electron-connect/lib/server.js":"'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\nvar spawn = require('cross-spawn');\nvar kill = require('tree-kill');\nvar webSocket = require('ws');\nvar _ = require('lodash');\nvar SocketWrapper = require('./socketWrapper');\nvar util = require('./util');\n\nvar ProcessManager = function () {\n  this.start = this.start.bind(this);\n  this.restart = this.restart.bind(this);\n  this.reload = this.reload.bind(this);\n  this.stop = this.stop.bind(this);\n};\nProcessManager.prototype = new EventEmitter();\nProcessManager.prototype.init = function (opt) {\n  this.opt = opt;\n\n  // handle old boolean verbose values\n  if (this.opt.verbose === true) {\n    this.opt.logLevel = util.LOG_LEVEL_VERBOSE;\n  } else if (this.opt.verbose === false) {\n    this.opt.logLevel = util.LOG_LEVEL_INFO;\n  }\n\n  this.numClients = 0;\n  this.electronState = 'init';\n  this.restartCallback = null;\n  return this;\n};\n\nProcessManager.prototype.warn= function (msg) {\n  console.warn('[' + new Date().toISOString() + '] [electron-connect] [server]', msg);\n};\n\nProcessManager.prototype.info = function (msg) {\n  if(this.opt.logLevel >= util.LOG_LEVEL_INFO) console.log('[' + new Date().toISOString() + '] [electron-connect] [server]', msg);\n};\n\nProcessManager.prototype.verbose = function (msg) {\n  if(this.opt.logLevel >= util.LOG_LEVEL_VERBOSE) console.log('[' + new Date().toISOString() + '] [electron-connect] [server]', msg);\n};\n\nProcessManager.prototype.setStateAndInvokeCallback = function(procState, cb) {\n  this.electronState = procState;\n  if (cb && (typeof cb === 'function')) {\n    cb(procState);\n  }\n};\n\nProcessManager.prototype.spawn = function (args, spawnOpt) {\n  // HACK - for now, pass electron option to preload some module (i picked 'process' module).\n  args = [\"-r process\"].concat(args);\n  this.electronProc = spawn(this.opt.electron, args.concat([this.opt.path]), spawnOpt);\n  this.info('started electron process: ' + this.electronProc.pid);\n};\n\nProcessManager.prototype.start = function (args, cb) {\n\n  if(!cb && !args) {\n    args = [];\n  }else if(!cb && typeof args === 'function') {\n    cb = args;\n    args = [];\n  }else if(typeof args === 'string') {\n    args = [args];\n  }else if(Array.isArray(args)){\n  }else if(typeof args === 'object'){\n    args = [];\n  }else{\n    throw new Error('args must be String or an Array of String');\n  }\n\n  this.electronState = 'starting';\n\n  this.wss = new webSocket.Server({ port: this.opt.port}, function () {\n    this.spawn(args, this.opt.spawnOpt);\n    this.info('created and listening on ' + this.opt.port);\n    this.setStateAndInvokeCallback('started', cb);\n  }.bind(this));\n  this.wss.on('connection', function connection(ws) {\n    var wrapper = new SocketWrapper(ws);\n    wrapper.on('message', function (message) {\n      this.verbose('receive message from client(window_id: ' + wrapper.id + ') '+  message);\n      var obj = JSON.parse(message);\n      if(obj.type && typeof obj.type === 'string') {\n        this.emit(obj.type, obj.data, wrapper);\n      }\n    }.bind(this));\n    wrapper.on('close', function () {\n      this.info('client (window_id: ' + wrapper.id + ') closed.');\n      SocketWrapper.delete(wrapper.id);\n      this.numClients--;\n      if (!this.numClients) {\n          this.verbose('no more open windows');\n        if (this.opt.stopOnClose && this.electronState !== 'restarting' && this.electronState !== 'reloading') {\n          this.verbose('stopOnClose is set. So, invoking stop..');\n          this.stop(cb);\n        } else if (this.electronState === 'restarting') {\n          this.info('Respawning electron process..');\n          this.spawn(args, this.opt.spawnOpt);\n          this.setStateAndInvokeCallback('restarted', this.restartCallback);\n        }\n      }\n    }.bind(this));\n    this.info('client (window_id: ' + wrapper.id + ') started.');\n    this.numClients++;\n  }.bind(this));\n  this.registerHandler();\n};\n\nProcessManager.prototype.broadcast = function (type, data) {\n  SocketWrapper.broadcast(type, data);\n};\n\n// ProcessManager.prototype.sendMessage = function (id, type, data) {\n//   SocketWrapper.get(id).sendMessage(type, data);\n// };\n\nProcessManager.prototype.registerHandler = function () {\n  this.on('initBounds', function (data, wrapper) {\n    if(JSON.stringify(wrapper.get('init_bounds')) !== JSON.stringify(data.bounds)) {\n      wrapper.set('init_bounds', data.bounds);\n      wrapper.set('bounds', data.bounds);\n    }\n  }.bind(this));\n  this.on('changeBounds', function (data, wrapper) {\n    this.verbose('changeBounds for window_id: ' + wrapper.id);\n    wrapper.set('bounds', data.bounds);\n  }.bind(this));\n  this.on('getBounds', function (data, wrapper) {\n    var bounds = wrapper.get('bounds');\n    this.verbose('getBounds for window_id: ' + wrapper.id + ', bounds: ' + JSON.stringify(bounds));\n    wrapper.sendMessage('setBounds', {bounds: bounds});\n  }.bind(this));\n};\n\nProcessManager.prototype.restart = function (args, cb) {\n  if(!cb && !args) {\n    args = [];\n  }else if(!cb && typeof args === 'function') {\n    cb = args;\n    args = [];\n  }else if(typeof args === 'string') {\n    args = [args];\n  }else if(Array.isArray(args)){\n  }else if(typeof args === 'object') {\n    args = [];\n  }else{\n    throw new Error('args must be String or an Array of String');\n  }\n\n  if (typeof cb === 'function') {\n    this.restartCallback = cb;\n  }\n\n  this.electronState = 'restarting';\n  if (this.electronProc) {\n    this.info('restarting electron process: ' + this.electronProc.pid);\n    if (!this.numClients) {\n      this.killProcess(function() {\n        this.info('Respawning electron process..');\n        this.spawn(args, this.opt.spawnOpt);\n        this.setStateAndInvokeCallback('restarted', this.restartCallback);\n      }.bind(this));\n    } else {\n      this.killProcess(function() {\n        if (this.restartCallback) {\n          this.restartCallback(this.electronState);\n        }\n      }.bind(this));\n    }\n  }\n};\n\nProcessManager.prototype.killProcess = function (cb) {\n  if(this.electronProc) {\n    this.info('killing electron process tree: ' + this.electronProc.pid);\n    kill(this.electronProc.pid, 'SIGTERM', cb);\n  }\n};\n\nProcessManager.prototype.stop = function (cb) {\n  this.info('stopping electron process: ' + this.electronProc.pid);\n  this.electronState = 'stopping';\n  this.killProcess(function(err){\n    this.wss.close();\n    this.setStateAndInvokeCallback('stopped', cb);\n  }.bind(this));\n};\n\nProcessManager.prototype.reload = function (ids) {\n  var list;\n  if(typeof ids === 'string') {\n    list = [ids];\n  }else if(Array.isArray(ids)) {\n    list = ids;\n  }\n\n  this.electronState = 'reloading';\n  if(!list) {\n    this.broadcast('reload');\n  }else{\n    ids.forEach(function (id) {\n      SocketWrapper.get(id).sendMessage('reload');\n    });\n  }\n  setTimeout((self) => {\n    self.electronState = 'reloaded';\n  }, 3000, this);\n};\n\nmodule.exports = {\n  create: function (options) {\n    var electron;\n    if(options && options.useGlobalElectron) {\n      electron = 'electron';\n    } else {\n      try {\n        electron = require('electron');\n      } catch (e) {\n        if(e.code === 'MODULE_NOT_FOUND') {\n          electron = 'electron';\n        }\n      }\n    }\n    var opt = _.merge({\n      stopOnClose: false,\n      electron: electron,\n      path: process.cwd(),\n      port: 30080,\n      logLevel: util.LOG_LEVEL_INFO,\n      spawnOpt: {stdio: 'inherit'}\n    }, options || {});\n    return new ProcessManager().init(opt);\n  }\n};\n\n","/home/travis/build/npmtest/node-npmtest-electron-connect/node_modules/electron-connect/lib/socketWrapper.js":"'use strict';\n\nvar util = require('./util');\n\nvar createReply = function (ws) {\n  return function (type, data) {\n    return util.sendMessage(ws, type, data);\n  };\n};\n\nvar repo = {};\nvar registry = {};\nvar SocketWrapper = function (ws) {\n  this._socket = ws;\n  if(ws && ws.upgradeReq) {\n    this.id = util.getIdFromUrl(ws.upgradeReq.url);\n  }\n  this.sendMessage = createReply(ws);\n  if(!registry[this.id]) {\n    registry[this.id] = {};\n  }\n  SocketWrapper.add(this);\n};\n\nSocketWrapper.get = function (id) {\n  return repo[id];\n};\n\nSocketWrapper.add = function (wrapper) {\n  repo[wrapper.id] = wrapper;\n};\n\nSocketWrapper.delete = function (id) {\n  delete repo[id];\n};\n\nSocketWrapper.broadcast = function (type, data) {\n  for(var id in repo) {\n    repo[id].sendMessage(type, data);\n  }\n};\n\nSocketWrapper.prototype.on = function () {\n  this._socket.on.apply(this._socket, arguments);\n  return this;\n};\n\nSocketWrapper.prototype.get = function (key) {\n  if(registry[this.id]){\n    return registry[this.id][key];\n  }\n  return;\n};\n\nSocketWrapper.prototype.set = function (key, value) {\n  if(registry[this.id]){\n    registry[this.id][key] = value;\n  }\n};\n\nSocketWrapper.prototype.clearAll = function () {\n  registry[this.id] = {};\n};\n\nmodule.exports = SocketWrapper;\n\n","/home/travis/build/npmtest/node-npmtest-electron-connect/node_modules/electron-connect/lib/util.js":"'use strict';\n\nvar webSocket = require('ws');\n\nmodule.exports = {\n  sendMessage: function (socket, type, data) {\n    if(!type || !socket || socket.readyState !== webSocket.OPEN) return;\n    var obj = {type: type};\n    if(data) obj.data = data;\n    socket.send(JSON.stringify(obj));\n  },\n  getIdFromUrl: function (url) {\n    var matched = url.match(/\\?window_id=([^&])/);\n    return matched && matched[1];\n  },\n  LOG_LEVEL_WARNING: 0,\n  LOG_LEVEL_INFO: 1,\n  LOG_LEVEL_VERBOSE: 2,\n};\n","/home/travis/build/npmtest/node-npmtest-electron-connect/node_modules/electron-connect/lib/client.js":"'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\nvar WebSocket = require('ws');\nvar _ = require('lodash');\nvar util = require('./util');\n\nvar getBrowserWindow = function () {\n  if(process.type === 'renderer') {\n    return require('electron').remote.getCurrentWindow();\n  }\n};\n\nvar Client = function () {};\nvar defaultOpt = {\n  port: 30080,\n  sendBounds: true,\n  logLevel: util.LOG_LEVEL_INFO,\n};\nClient.prototype = new EventEmitter();\n\nClient.prototype.warn = function (msg) {\n  console.warn('[' + new Date().toISOString() + '] [electron-connect] [client: ' + this.id + '] ' + msg);\n};\n\nClient.prototype.info = function (msg) {\n  if(this.opt.logLevel >= util.LOG_LEVEL_INFO) console.log('[' + new Date().toISOString() + '] [electron-connect] [client: ' + this.id + '] ' + msg);\n};\n\nClient.prototype.verbose = function (msg) {\n  if(this.opt.logLevel >= util.LOG_LEVEL_VERBOSE) console.log('[' + new Date().toISOString() + '] [electron-connect] [client: ' + this.id + '] ' + msg);\n};\n\nClient.prototype.join = function (browserWindow, options, cb) {\n  if(browserWindow && browserWindow.constructor.name === 'BrowserWindow') {\n    if(!options && !cb) {\n      this.opt = defaultOpt;\n    }else if(!cb && typeof options === 'function') {\n      cb = options;\n      this.opt = defaultOpt;\n    }else{\n      this.opt = _.merge(defaultOpt, options);\n    }\n  }else{\n    if(typeof browserWindow === 'object') {\n      this.opt = _.merge(defaultOpt, browserWindow);\n      cb = options;\n    }else{\n      this.opt = defaultOpt;\n      cb = browserWindow;\n    }\n    browserWindow = getBrowserWindow();\n  }\n\n  // handle old boolean verbose values\n  if (this.opt.verbose === true) {\n    this.opt.logLevel = util.LOG_LEVEL_VERBOSE;\n  } else if (this.opt.verbose === false) {\n    this.opt.logLevel = util.LOG_LEVEL_INFO;\n  }\n  \n  var id = browserWindow ? browserWindow.id : '_no_browser';\n  this.id = id;\n  this.socket = new WebSocket('ws://localhost:' + this.opt.port + '/' + '?window_id=' + id);\n  this.socket.on('open', function () {\n    this.info('connected server');\n    this.socket.on('message', function (msg) {\n      try {\n        var message = JSON.parse(msg);\n        if(message.type && typeof message.type === 'string') {\n          this.verbose('receive message: ' +  msg);\n          this.emit(message.type, _.merge(message.data, {id: this.id}));\n        }\n      }catch (e) {\n        console.error(e);\n      }\n    }.bind(this));\n\n    if(browserWindow) {\n      this.registerWindow(browserWindow);\n    }\n    typeof cb === 'function' && cb();\n  }.bind(this));\n  this.registerHandler(browserWindow);\n  return this;\n};\n\nClient.prototype.registerWindow = function (browserWindow) {\n  this.opt.sendBounds && ['move', 'resize'].forEach(function (eventName) {\n    browserWindow.on(eventName, function () {\n      this.sendMessage('changeBounds', {bounds: browserWindow.getBounds()});\n    }.bind(this));\n  }.bind(this));\n  if (process.type == 'renderer') {\n    //if (typeof window === 'object') {\n      //window.addEventListener('beforeunload', function () {\n        //this.close(browserWindow);\n      //}.bind(this));\n    //}\n  } else {\n    browserWindow.on('closed', function() {\n      this.close(browserWindow);\n    }.bind(this));\n  }\n  this.sendMessage('initBounds', {bounds: browserWindow.getBounds()});\n  this.sendMessage('getBounds');\n};\n\nClient.prototype.sendMessage = function (type, data) {\n  util.sendMessage(this.socket, type, data);\n};\n\nClient.prototype.registerHandler = function (browserWindow) {\n  this.on('setBounds', function (data) {\n    if (this.id == data.id) {\n      this.opt.sendBounds && data.bounds && browserWindow && browserWindow.setBounds(data.bounds);\n    }\n  }.bind(this));\n\n  this.on('reload', function (data) {\n    if (data.id == this.id) {\n      if(!browserWindow) return;\n      if(browserWindow.webContents) {\n        if (process.type == 'renderer') {\n          if(this.opt.sendBounds) {\n            browserWindow.removeAllListeners('move').removeAllListeners('resize');\n          }\n        }\n        browserWindow.webContents.reloadIgnoringCache();\n      }\n    }\n  }.bind(this));\n\n};\n\nClient.prototype.close = function (browserWindow) {\n  if(this.opt.sendBounds) {\n    browserWindow.removeAllListeners('move').removeAllListeners('resize');\n  }\n  this.socket.terminate();\n};\n\nvar clients = {};\n\nmodule.exports = {\n  create: function (browserWindow, options, cb) {\n    return new Client().join(browserWindow, options, cb);\n  }\n};\n\n","/home/travis/build/npmtest/node-npmtest-electron-connect/node_modules/electron-connect/gulpfile.js":"'use strict';\n\nvar gulp = require('gulp');\nvar mocha = require('gulp-mocha');\n\ngulp.task('test', function () {\n  return gulp.src('test/**/*.spec.js').pipe(mocha());\n});\n"}